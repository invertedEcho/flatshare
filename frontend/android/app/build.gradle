plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file("local.properties")
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader("UTF-8") { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty("flutter.versionCode")
if (flutterVersionCode == null) {
    flutterVersionCode = "1"
}

def flutterVersionName = localProperties.getProperty("flutter.versionName")
if (flutterVersionName == null) {
    flutterVersionName = "1.0"
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
  keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    namespace = "com.invertedecho.flatshare"

    // we override these values to ensure compatiblity with the nix flake
    // not optimal to do it this way, because not everyone uses the nix flake
    compileSdk = 34
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId = "com.invertedecho.flatshare"
        versionCode = flutterVersionCode.toInteger()
        versionName = flutterVersionName

	// we override these values to ensure compatiblity with the nix flake
	// not optimal to do it this way, because not everyone uses the nix flake
        minSdk = 34
        targetSdk = 34

	// TODO: this seems to do nothing right now :(
	// so we still install build tools version 30.0.3 in our nix flake
	// also dont want to spend too much time for this
	buildToolsVersion = 34
    }

    signingConfigs {
	 release {
	     keyAlias keystoreProperties['keyAlias']
	     keyPassword keystoreProperties['keyPassword']
	     storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
	     storePassword keystoreProperties['storePassword']
	 }
     }

    buildTypes {
        release {
            signingConfig = signingConfigs.debug
	    signingConfig = signingConfigs.release
        }
    }
}

flutter {
    source = "../.."
}

configurations.all {
    resolutionStrategy {
        eachDependency {
            if ((requested.group == "org.jetbrains.kotlin") && (requested.name.startsWith("kotlin-stdlib"))) {
                useVersion("1.8.0")
            }
        }
    }
}
